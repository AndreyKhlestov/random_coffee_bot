import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from tg_bot.db.db_commands import (
    search_tg_user,
    user_id_block_unblock,
    get_tg_user
)
from tg_bot.keyboards.inline import get_callback_btns
from tg_bot.middlewares.admin import AdminMiddleware
from tg_bot.misc.utils import delete_message
from tg_bot.states.all_states import Admin

admin_router = Router()
admin_router.message.middleware(AdminMiddleware())
admin_router.callback_query.middleware(AdminMiddleware())

USER_NOT_EXIST = (
    '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
    '\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø–æ—á—Ç—É.'
    '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
)


@admin_router.message(Command('admin'))
async def admin_message(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É."""
    msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(Admin.get_email)
    await delete_message(msg)


@admin_router.message(Admin.get_email)
async def get_name(message: Message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ."""

    tg_model = await search_tg_user(message.text.lower())

    if tg_model:
        about_user = (
            'üíº<b>–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>üíº'
            '\n__________________________________'
            f'\nüîâ<b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:</b> {tg_model.enter_full_name}'
            f'\nüîâ<b>–Ω–∏–∫–Ω–µ–π–º:</b> {tg_model.username}'
            f'\nüîâ<b>–ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ç–≥:</b> {tg_model.full_name}'
        )
        button = 'üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if tg_model.is_unblocked else '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'

        msg = await message.answer(
            text=about_user, reply_markup=get_callback_btns(
                btns={f'{button}': f'blocked_{tg_model.id}'}))
        await delete_message(msg)

    else:
        msg = await message.answer(
            text=USER_NOT_EXIST, reply_markup=get_callback_btns(
                btns={'‚õî –û—Ç–º–µ–Ω–∞': 'cancel'}))
        await delete_message(msg)


@admin_router.callback_query(F.data.startswith('cancel'))
async def stop(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞."""
    await callback.answer()
    msg = await callback.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await state.clear()
    await delete_message(msg)


@admin_router.callback_query(F.data.startswith('blocked_'))
async def unblock(callback: CallbackQuery, state: FSMContext):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.split('_')[-1])
    tg_model = await get_tg_user(user_id)
    button = '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if tg_model.is_unblocked else 'üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'
    msg = '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if tg_model.is_unblocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    await user_id_block_unblock(user_id)
    await callback.answer()
    await callback.message.edit_text(
        text=(
            'üíº<b>–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>üíº'
            '\n__________________________________'
            f'\nüîâ<b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:</b> {tg_model.enter_full_name}'
            f'\nüîâ<b>–Ω–∏–∫–Ω–µ–π–º:</b> {tg_model.username}'
            f'\nüîâ<b>–ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ç–≥:</b> {tg_model.full_name}'
        ),
        reply_markup=get_callback_btns(
            btns={
                f'{button}': f'blocked_{tg_model.id}'
            }
        )
    )
    msg = await callback.message.answer(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_model.enter_full_name} {msg}'
    )
    await state.clear()
    await delete_message(msg)
